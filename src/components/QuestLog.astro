---
// src/components/QuestLog.astro
// Quest log component for The Soulforge Saga

import { gameStateManager } from '../game/stateManager.js';
import { questSystem } from '../game/questSystem.js';
---

<div id="quest-log-container" class="h-full flex flex-col">
  <h2 class="text-2xl font-bold mb-4">Buku Misi</h2>
  
  <div class="flex gap-4 flex-1 overflow-hidden">
    <!-- Quest list -->
    <div class="w-1/3 flex flex-col gap-4">
      <div class="glass-card p-4 flex-1">
        <div class="flex justify-between items-center mb-3">
          <h3 class="text-xl font-bold">Misi Aktif</h3>
          <div class="text-sm text-slate-400" id="active-quest-count">
            0 misi
          </div>
        </div>
        
        <div class="space-y-2 overflow-y-auto pr-2 flex-1" id="active-quest-list">
          <!-- Active quests will be populated dynamically -->
          <div class="text-center text-slate-500 py-8">
            <i data-lucide="loader" class="w-8 h-8 mx-auto mb-2 animate-spin"></i>
            <p>Memuat misi...</p>
          </div>
        </div>
      </div>
      
      <div class="glass-card p-4">
        <div class="flex justify-between items-center mb-3">
          <h3 class="text-xl font-bold">Misi Selesai</h3>
          <div class="text-sm text-slate-400" id="completed-quest-count">
            0 misi
          </div>
        </div>
        
        <div class="space-y-2 overflow-y-auto pr-2" style="max-height: 200px;" id="completed-quest-list">
          <!-- Completed quests will be populated dynamically -->
        </div>
      </div>
    </div>
    
    <!-- Quest details -->
    <div class="flex-1 flex flex-col">
      <div class="glass-card p-4 flex-1 overflow-hidden flex flex-col">
        <div id="quest-details-container" class="flex items-center justify-center h-full text-slate-500">
          <div class="text-center">
            <i data-lucide="clipboard-list" class="w-12 h-12 mx-auto mb-2"></i>
            <p>Pilih misi untuk melihat detail</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let selectedQuest = null;
  
  // Function to initialize the quest log UI
  function initializeQuestLogUI() {
    // Get active and completed quests
    const activeQuests = questSystem.getActiveQuests();
    const completedQuests = questSystem.getCompletedQuests();
    
    // Update quest counts
    const activeCountElement = document.getElementById('active-quest-count');
    const completedCountElement = document.getElementById('completed-quest-count');
    
    if (activeCountElement) {
      activeCountElement.textContent = `${activeQuests.length} misi`;
    }
    
    if (completedCountElement) {
      completedCountElement.textContent = `${completedQuests.length} misi`;
    }
    
    // Render quest lists
    renderActiveQuests(activeQuests);
    renderCompletedQuests(completedQuests);
  }
  
  // Function to render active quests
  function renderActiveQuests(quests) {
    const questListElement = document.getElementById('active-quest-list');
    if (!questListElement) return;
    
    if (quests.length === 0) {
      questListElement.innerHTML = `
        <div class="text-center text-slate-500 py-8">
          <i data-lucide="clipboard" class="w-8 h-8 mx-auto mb-2"></i>
          <p>Tidak ada misi aktif</p>
        </div>
      `;
      return;
    }
    
    questListElement.innerHTML = quests.map(quest => {
      // Calculate completion percentage
      const totalObjectives = quest.objectives.length;
      const completedObjectives = quest.objectives.filter(obj => obj.completed).length;
      const completionPercentage = totalObjectives > 0 ? (completedObjectives / totalObjectives) * 100 : 0;
      
      return `
        <div 
          class="quest-item glass-card p-3 cursor-pointer hover:bg-slate-700/50 transition-colors ${selectedQuest && selectedQuest.id === quest.id ? 'bg-indigo-500/20 border border-indigo-500/50' : ''}"
          data-quest-id="${quest.id}"
        >
          <div class="flex justify-between items-start mb-2">
            <h4 class="font-bold">${quest.name}</h4>
            <span class="text-xs px-2 py-1 rounded-full bg-blue-500/20 text-blue-300">
              ${quest.type}
            </span>
          </div>
          <p class="text-xs text-slate-400 mb-2">${quest.description}</p>
          <div class="w-full bg-slate-700 rounded-full h-2">
            <div 
              class="bg-green-500 h-2 rounded-full" 
              style="width: ${completionPercentage}%"
            ></div>
          </div>
          <div class="text-xs text-slate-400 mt-1">
            ${completedObjectives}/${totalObjectives} objektif selesai
          </div>
        </div>
      `;
    }).join('');
    
    // Add event listeners to quest items
    document.querySelectorAll('[data-quest-id]').forEach(element => {
      element.addEventListener('click', () => {
        const questId = element.getAttribute('data-quest-id');
        selectQuest(questId);
      });
    });
  }
  
  // Function to render completed quests
  function renderCompletedQuests(quests) {
    const questListElement = document.getElementById('completed-quest-list');
    if (!questListElement) return;
    
    if (quests.length === 0) {
      questListElement.innerHTML = `
        <div class="text-center text-slate-500 py-4">
          <p>Belum ada misi yang selesai</p>
        </div>
      `;
      return;
    }
    
    questListElement.innerHTML = quests.map(quest => `
      <div 
        class="quest-item glass-card p-2 cursor-pointer hover:bg-slate-700/50 transition-colors"
        data-quest-id="${quest.id}"
      >
        <div class="flex justify-between items-center">
          <h4 class="font-bold text-sm truncate">${quest.name}</h4>
          <i data-lucide="check" class="w-4 h-4 text-green-500"></i>
        </div>
      </div>
    `).join('');
    
    // Add event listeners to quest items
    document.querySelectorAll('#completed-quest-list [data-quest-id]').forEach(element => {
      element.addEventListener('click', () => {
        const questId = element.getAttribute('data-quest-id');
        selectQuest(questId);
      });
    });
  }
  
  // Function to select a quest
  function selectQuest(questId) {
    const activeQuests = questSystem.getActiveQuests();
    const completedQuests = questSystem.getCompletedQuests();
    
    // Look in active quests first
    let quest = activeQuests.find(q => q.id === questId);
    
    // If not found, look in completed quests
    if (!quest) {
      quest = completedQuests.find(q => q.id === questId);
    }
    
    if (quest) {
      selectedQuest = quest;
      updateQuestDetails(quest);
    }
  }
  
  // Function to update quest details display
  function updateQuestDetails(quest) {
    const container = document.getElementById('quest-details-container');
    if (!container) return;
    
    if (!quest) {
      container.innerHTML = `
        <div class="flex items-center justify-center h-full text-slate-500">
          <div class="text-center">
            <i data-lucide="clipboard-list" class="w-12 h-12 mx-auto mb-2"></i>
            <p>Pilih misi untuk melihat detail</p>
          </div>
        </div>
      `;
      return;
    }
    
    // Format objectives HTML
    const objectivesHtml = quest.objectives.map(objective => {
      return `
        <div class="flex items-center mb-2">
          <i data-lucide="${objective.completed ? 'check-circle' : 'circle'}" class="w-5 h-5 mr-2 ${objective.completed ? 'text-green-500' : 'text-slate-500'}"></i>
          <span class="${objective.completed ? 'line-through text-slate-500' : ''}">
            ${objective.description}
          </span>
        </div>
      `;
    }).join('');
    
    // Determine quest status
    const statusText = quest.status === 'completed' ? 'Selesai' : 
                      quest.status === 'failed' ? 'Gagal' : 'Aktif';
    const statusClass = quest.status === 'completed' ? 'bg-green-500/20 text-green-300' : 
                       quest.status === 'failed' ? 'bg-red-500/20 text-red-300' : 
                       'bg-blue-500/20 text-blue-300';
    
    container.innerHTML = `
      <div class="flex-1 overflow-hidden flex flex-col">
        <div class="flex justify-between items-start mb-4">
          <div>
            <h3 class="text-2xl font-bold">${quest.name}</h3>
            <div class="flex items-center mt-1">
              <span class="text-sm px-2 py-1 rounded-full mr-2 ${statusClass}">
                ${statusText}
              </span>
              <span class="text-sm px-2 py-1 rounded-full bg-purple-500/20 text-purple-300">
                ${quest.type}
              </span>
            </div>
          </div>
          ${quest.status === 'active' ? `
            <button 
              class="glass-button secondary-button px-3 py-1 text-sm"
              id="abandon-quest-btn"
              data-quest-id="${quest.id}"
            >
              <i data-lucide="x" class="w-4 h-4 mr-1"></i>
              Tinggalkan
            </button>
          ` : ''}
        </div>
        
        <p class="text-slate-300 mb-6">${quest.description}</p>
        
        <!-- Objectives -->
        <div class="mb-6 flex-1 overflow-y-auto">
          <h4 class="font-bold text-lg mb-3">Objektif</h4>
          <div class="glass-card p-4">
            ${objectivesHtml}
          </div>
        </div>
        
        <!-- Rewards (for active quests) -->
        ${quest.status === 'active' && quest.rewards ? `
          <div class="pt-4 border-t border-slate-700">
            <h4 class="font-bold text-lg mb-3">Hadiah</h4>
            <div class="grid grid-cols-2 gap-2 text-sm">
              ${quest.rewards.experience ? `
                <div class="flex items-center">
                  <i data-lucide="star" class="w-4 h-4 text-yellow-500 mr-2"></i>
                  <span>${quest.rewards.experience} EXP</span>
                </div>
              ` : ''}
              ${quest.rewards.essence ? `
                <div class="flex items-center">
                  <i data-lucide="zap" class="w-4 h-4 text-blue-500 mr-2"></i>
                  <span>${quest.rewards.essence} Essence</span>
                </div>
              ` : ''}
            </div>
          </div>
        ` : ''}
      </div>
    `;
    
    // Add event listener to abandon button
    const abandonButton = document.getElementById('abandon-quest-btn');
    if (abandonButton) {
      abandonButton.addEventListener('click', () => {
        const questId = abandonButton.getAttribute('data-quest-id');
        abandonQuest(questId);
      });
    }
  }
  
  // Function to abandon a quest
  function abandonQuest(questId) {
    if (confirm('Apakah Anda yakin ingin meninggalkan misi ini?')) {
      // In a real implementation, we would call questSystem to abandon the quest
      showNotification('Misi ditinggalkan', 'info');
      
      // Refresh UI
      initializeQuestLogUI();
      updateQuestDetails(null);
    }
  }
  
  // Function to show notification
  function showNotification(message, type) {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 px-4 py-2 rounded-lg shadow-lg z-50 ${
      type === 'success' ? 'bg-green-500' :
      type === 'error' ? 'bg-red-500' :
      type === 'info' ? 'bg-blue-500' :
      'bg-slate-700'
    } text-white`;
    notification.textContent = message;
    
    // Add to document
    document.body.appendChild(notification);
    
    // Remove after 3 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 3000);
  }
  
  // Set up event listeners
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize quest log UI
    initializeQuestLogUI();
  });
  
  // Listen for state changes
  gameStateManager.subscribe((state) => {
    // Refresh quest log UI when state changes
    initializeQuestLogUI();
    if (selectedQuest) {
      // Try to find the updated version of the selected quest
      const activeQuests = questSystem.getActiveQuests();
      const completedQuests = questSystem.getCompletedQuests();
      const updatedQuest = [...activeQuests, ...completedQuests].find(q => q.id === selectedQuest.id);
      if (updatedQuest) {
        updateQuestDetails(updatedQuest);
      }
    }
  });
</script>