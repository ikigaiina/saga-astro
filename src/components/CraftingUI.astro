---
// src/components/CraftingUI.astro
// Crafting UI component for The Soulforge Saga

import { gameStateManager } from '../game/stateManager.js';
import { craftingSystem } from '../game/craftingSystem.js';
import { TRADABLE_ITEMS_DATA } from '../data/items.js';

// Get initial state
const state = gameStateManager.getState();
const availableRecipes = craftingSystem.getAvailableRecipes();
const playerInventory = state.player.inventory;
---

<div id="crafting-container" class="h-full flex flex-col">
  <h2 class="text-2xl font-bold mb-4">Kerajinan</h2>
  
  <div class="flex gap-4 flex-1 overflow-hidden">
    <!-- Recipe list -->
    <div class="w-1/3 flex flex-col gap-4">
      <div class="glass-card p-4 flex-1">
        <div class="flex justify-between items-center mb-3">
          <h3 class="text-xl font-bold">Resep Tersedia</h3>
          <div class="text-sm text-slate-400">
            {availableRecipes.length} resep
          </div>
        </div>
        
        <div class="relative mb-3">
          <input 
            type="text" 
            placeholder="Cari resep..." 
            class="glass-input w-full p-2 pl-8"
            data-js-action="filter-recipes"
          />
          <i data-lucide="search" class="w-4 h-4 text-slate-400 absolute left-2 top-2.5"></i>
        </div>
        
        <div class="space-y-2 overflow-y-auto pr-2 flex-1">
          {availableRecipes.map((recipe) => (
            <div 
              class="crafting-recipe glass-card p-3 cursor-pointer hover:bg-slate-700/50 transition-colors"
              data-js-action="select-recipe"
              data-recipe-id={recipe.id}
            >
              <div class="flex justify-between items-start">
                <h4 class="font-bold">{recipe.name}</h4>
                <span class={`text-xs px-2 py-1 rounded-full ${
                  recipe.requiredLevel <= state.player.level ? 
                  'bg-green-500/20 text-green-300' : 
                  'bg-red-500/20 text-red-300'
                }`}>
                  Lv. {recipe.requiredLevel}
                </span>
              </div>
              <p class="text-xs text-slate-400 mt-1 line-clamp-2">{recipe.description}</p>
              <div class="flex justify-between items-center mt-2">
                <span class="text-xs text-slate-400">
                  {recipe.timeRequired} menit
                </span>
                <span class={`text-xs ${
                  recipe.canCraft ? 'text-green-400' : 'text-red-400'
                }`}>
                  {recipe.canCraft ? 'Dapat Dibuat' : 'Bahan Tidak Cukup'}
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <!-- Crafting station info -->
      <div class="glass-card p-4">
        <h3 class="text-xl font-bold mb-3">Stasiun Kerajinan</h3>
        <div class="space-y-2 text-sm">
          <div class="flex justify-between">
            <span class="text-slate-400">Tingkat Stasiun:</span>
            <span>Basic Workbench</span>
          </div>
          <div class="flex justify-between">
            <span class="text-slate-400">Kemampuan Maks:</span>
            <span>Level 10</span>
          </div>
          <div class="flex justify-between">
            <span class="text-slate-400">Efisiensi:</span>
            <span>100%</span>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Recipe details and crafting -->
    <div class="flex-1 flex flex-col">
      <div class="glass-card p-4 flex-1 overflow-hidden flex flex-col">
        <!-- Recipe details will be populated by JavaScript -->
        <div id="recipe-details-container" class="flex items-center justify-center h-full text-slate-500">
          <div class="text-center">
            <i data-lucide="hammer" class="w-12 h-12 mx-auto mb-2"></i>
            <p>Pilih resep untuk melihat detail dan membuat item</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // State for selected recipe
  let selectedRecipe = null;
  
  // Function to select a recipe
  function selectRecipe(recipeId) {
    selectedRecipe = craftingSystem.getRecipe(recipeId);
    console.log('Selected recipe:', selectedRecipe);
    
    // Update UI to show recipe details
    updateRecipeDetails(selectedRecipe);
  }
  
  // Function to update recipe details display
  function updateRecipeDetails(recipe) {
    const container = document.getElementById('recipe-details-container');
    if (!container) return;
    
    if (!recipe) {
      container.innerHTML = `
        <div class="flex items-center justify-center h-full text-slate-500">
          <div class="text-center">
            <i data-lucide="hammer" class="w-12 h-12 mx-auto mb-2"></i>
            <p>Pilih resep untuk melihat detail dan membuat item</p>
          </div>
        </div>
      `;
      return;
    }
    
    const state = gameStateManager.getState();
    const playerInventory = state.player.inventory;
    
    // Helper function to get item icon
    function getItemIcon(type) {
      const iconMap = {
        'weapon': 'sword',
        'armor': 'shield',
        'consumable': 'beaker',
        'material': 'package',
        'artifact': 'gem',
        'currency': 'coins',
        'tool': 'hammer',
        'helmet': 'hard-hat',
        'boots': 'boot',
        'ring': 'circle',
        'amulet': 'diamond'
      };
      
      return iconMap[type] || 'package';
    }
    
    // Function to check if player can craft recipe
    function canCraftRecipe(recipe) {
      return craftingSystem.canCraftRecipe(recipe);
    }
    
    // Format ingredients HTML
    const ingredientsHtml = recipe.ingredients.map((ingredient) => {
      const itemData = TRADABLE_ITEMS_DATA[ingredient.itemId];
      const playerHas = playerInventory.find(i => i.id === ingredient.itemId);
      const playerQuantity = playerHas ? playerHas.quantity : 0;
      const hasEnough = playerQuantity >= ingredient.quantity;
      
      return `
        <div class="glass-card p-3 flex items-center ${hasEnough ? 'border border-green-500/30' : 'border border-red-500/30'}">
          <div class="w-10 h-10 rounded bg-slate-700 flex items-center justify-center mr-3">
            <i data-lucide="${getItemIcon(itemData?.type)}" class="w-5 h-5"></i>
          </div>
          <div class="flex-1">
            <div class="font-bold">${itemData?.name || ingredient.itemId}</div>
            <div class="text-sm flex justify-between">
              <span>
                ${playerQuantity}/${ingredient.quantity}
              </span>
              <span class="${hasEnough ? 'text-green-400' : 'text-red-400'}">
                ${hasEnough ? 'Cukup' : 'Tidak Cukup'}
              </span>
            </div>
          </div>
        </div>
      `;
    }).join('');
    
    // Format output HTML
    const outputItems = [...Array(recipe.output.quantity)].map((_, i) => {
      const itemData = TRADABLE_ITEMS_DATA[recipe.output.itemId];
      return `
        <div class="glass-card p-3 text-center">
          <div class="w-12 h-12 mx-auto rounded bg-slate-700 flex items-center justify-center mb-2">
            <i data-lucide="${getItemIcon(itemData?.type)}" class="w-6 h-6"></i>
          </div>
          <div class="font-bold text-sm">${itemData?.name || recipe.output.itemId}</div>
          <div class="text-xs mt-1 ${
            itemData?.rarity === 'common' ? 'text-slate-400' :
            itemData?.rarity === 'uncommon' ? 'text-green-400' :
            itemData?.rarity === 'rare' ? 'text-blue-400' :
            itemData?.rarity === 'epic' ? 'text-purple-400' :
            itemData?.rarity === 'legendary' ? 'text-yellow-400' :
            'text-red-400'
          }">
            ${itemData?.rarity === 'common' ? 'Biasa' :
             itemData?.rarity === 'uncommon' ? 'Tidak Biasa' :
             itemData?.rarity === 'rare' ? 'Langka' :
             itemData?.rarity === 'epic' ? 'Epik' :
             itemData?.rarity === 'legendary' ? 'Legendaris' :
             'Primordial'}
          </div>
        </div>
      `;
    }).join('');
    
    container.innerHTML = `
      <div class="flex justify-between items-start mb-4">
        <div>
          <h3 class="text-2xl font-bold">${recipe.name}</h3>
          <div class="flex items-center mt-1">
            <span class="text-sm px-2 py-1 rounded-full mr-2 ${
              recipe.requiredLevel <= state.player.level ? 
              'bg-green-500/20 text-green-300' : 
              'bg-red-500/20 text-red-300'
            }">
              Level Diperlukan: ${recipe.requiredLevel}
            </span>
            <span class="text-sm text-slate-400">
              ${recipe.timeRequired} menit
            </span>
          </div>
        </div>
        <button 
          class="glass-button secondary-button px-3 py-1 text-sm"
          data-js-action="bookmark-recipe"
          data-recipe-id="${recipe.id}"
        >
          <i data-lucide="bookmark" class="w-4 h-4 mr-1"></i>
          Simpan
        </button>
      </div>
      
      <p class="text-slate-300 mb-6">${recipe.description}</p>
      
      <!-- Ingredients -->
      <div class="mb-6">
        <h4 class="font-bold text-lg mb-3">Bahan Diperlukan</h4>
        <div class="grid grid-cols-2 gap-3">
          ${ingredientsHtml}
        </div>
      </div>
      
      <!-- Output -->
      <div class="mb-6">
        <h4 class="font-bold text-lg mb-3">Hasil</h4>
        <div class="grid grid-cols-3 gap-3">
          ${outputItems}
        </div>
      </div>
      
      <!-- Craft button -->
      <div class="mt-auto pt-4 border-t border-slate-700">
        <button 
          class="glass-button w-full py-3 text-lg font-bold flex items-center justify-center ${
            canCraftRecipe(recipe) ? 
            'primary-button' : 
            'secondary-button opacity-50 cursor-not-allowed'
          }"
          data-js-disabled="${!canCraftRecipe(recipe)}"
          data-js-action="craft-item"
          data-recipe-id="${recipe.id}"
        >
          <i data-lucide="hammer" class="w-5 h-5 mr-2"></i>
          Buat Item (${recipe.output.quantity}x)
        </button>
        ${!canCraftRecipe(recipe) ? `
          <div class="text-center text-sm text-red-400 mt-2">
            Anda tidak memiliki bahan yang cukup untuk membuat item ini
          </div>
        ` : ''}
      </div>
    `;
  }
  
  // Function to craft an item
  function craftItem(recipeId) {
    const recipe = craftingSystem.getRecipe(recipeId);
    if (!recipe || !canCraftRecipe(recipe)) {
      console.error('Cannot craft recipe - insufficient materials');
      return;
    }
    
    const result = craftingSystem.craftItem(recipeId);
    if (result.success) {
      console.log(result.message);
      showNotification(result.message, 'success');
      
      // Update UI
      updateCraftingUI();
    } else {
      console.error(result.message);
      showNotification(result.message, 'error');
    }
  }
  
  // Function to check if player can craft recipe
  function canCraftRecipe(recipe) {
    return craftingSystem.canCraftRecipe(recipe);
  }
  
  // Function to bookmark a recipe
  function bookmarkRecipe(recipeId) {
    console.log('Bookmarking recipe:', recipeId);
    showNotification('Resep disimpan ke koleksi', 'info');
  }
  
  // Function to filter recipes
  function filterRecipes(searchTerm) {
    console.log('Filtering recipes with term:', searchTerm);
    // In a real implementation, this would filter the recipe list
  }
  
  // Function to update crafting UI
  function updateCraftingUI() {
    // In a real implementation, this would update the UI elements
    console.log('Updating crafting UI');
  }
  
  // Function to show notification
  function showNotification(message, type) {
    // In a real implementation, this would show a toast notification
    console.log(`[${type.toUpperCase()}] ${message}`);
  }
  
  // Set up event listeners
  document.addEventListener('DOMContentLoaded', () => {
    // Handle recipe selection
    document.addEventListener('click', (event) => {
      if (event.target.closest('[data-js-action="select-recipe"]')) {
        const recipeId = event.target.closest('[data-js-action="select-recipe"]').getAttribute('data-recipe-id');
        if (recipeId) {
          selectRecipe(recipeId);
        }
      }
      
      // Handle bookmark button
      if (event.target.closest('[data-js-action="bookmark-recipe"]')) {
        const recipeId = event.target.closest('[data-js-action="bookmark-recipe"]').getAttribute('data-recipe-id');
        if (recipeId) {
          bookmarkRecipe(recipeId);
        }
      }
      
      // Handle craft button
      if (event.target.closest('[data-js-action="craft-item"]')) {
        const recipeId = event.target.closest('[data-js-action="craft-item"]').getAttribute('data-recipe-id');
        if (recipeId) {
          craftItem(recipeId);
        }
      }
    });
    
    // Handle filtering
    const filterInput = document.querySelector('[data-js-action="filter-recipes"]');
    if (filterInput) {
      filterInput.addEventListener('input', (e) => {
        filterRecipes(e.target.value);
      });
    }
  });
  
  // Listen for state changes
  gameStateManager.subscribe((state) => {
    // Update crafting UI when state changes
    console.log('Crafting state updated');
  });
</script>