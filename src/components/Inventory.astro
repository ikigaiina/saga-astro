---
// src/components/Inventory.astro
// Inventory component for The Soulforge Saga

import { gameStateManager } from '../game/stateManager.js';
import { inventorySystem } from '../game/inventorySystem.js';

// Get initial state
const state = gameStateManager.getState();
const inventory = state.player.inventory;
const equipment = state.player.equipment;
---

<div id="inventory-container" class="h-full flex flex-col">
  <h2 class="text-2xl font-bold mb-4">Inventaris</h2>
  
  <div class="flex flex-1 gap-4 overflow-hidden">
    <!-- Equipment section -->
    <div class="w-1/3 flex flex-col gap-4">
      <div class="glass-card p-4 flex-1">
        <h3 class="text-xl font-bold mb-3">Peralatan</h3>
        
        <div class="grid grid-cols-2 gap-3">
          <!-- Weapon slot -->
          <div class="equipment-slot glass-card p-3 text-center">
            <div class="text-sm text-slate-400 mb-1">Senjata</div>
            {equipment.weapon ? (
              <div class="cursor-pointer" 
                   title={`${equipment.weapon.name} (${equipment.weapon.rarity})`}
                   onClick={() => unequipItem('weapon')}>
                <div class="w-12 h-12 mx-auto bg-slate-700 rounded flex items-center justify-center mb-1">
                  <i data-lucide="sword" class="w-6 h-6"></i>
                </div>
                <div class="text-xs truncate">{equipment.weapon.name}</div>
              </div>
            ) : (
              <div class="w-12 h-12 mx-auto bg-slate-800 rounded flex items-center justify-center mb-1 border-2 border-dashed border-slate-600">
                <i data-lucide="sword" class="w-6 h-6 text-slate-600"></i>
              </div>
            )}
          </div>
          
          <!-- Armor slot -->
          <div class="equipment-slot glass-card p-3 text-center">
            <div class="text-sm text-slate-400 mb-1">Armor</div>
            {equipment.armor ? (
              <div class="cursor-pointer"
                   title={`${equipment.armor.name} (${equipment.armor.rarity})`}
                   onClick={() => unequipItem('armor')}>
                <div class="w-12 h-12 mx-auto bg-slate-700 rounded flex items-center justify-center mb-1">
                  <i data-lucide="shield" class="w-6 h-6"></i>
                </div>
                <div class="text-xs truncate">{equipment.armor.name}</div>
              </div>
            ) : (
              <div class="w-12 h-12 mx-auto bg-slate-800 rounded flex items-center justify-center mb-1 border-2 border-dashed border-slate-600">
                <i data-lucide="shield" class="w-6 h-6 text-slate-600"></i>
              </div>
            )}
          </div>
          
          <!-- Helmet slot -->
          <div class="equipment-slot glass-card p-3 text-center">
            <div class="text-sm text-slate-400 mb-1">Helm</div>
            {equipment.helmet ? (
              <div class="cursor-pointer"
                   title={`${equipment.helmet.name} (${equipment.helmet.rarity})`}
                   onClick={() => unequipItem('helmet')}>
                <div class="w-12 h-12 mx-auto bg-slate-700 rounded flex items-center justify-center mb-1">
                  <i data-lucide="hard-hat" class="w-6 h-6"></i>
                </div>
                <div class="text-xs truncate">{equipment.helmet.name}</div>
              </div>
            ) : (
              <div class="w-12 h-12 mx-auto bg-slate-800 rounded flex items-center justify-center mb-1 border-2 border-dashed border-slate-600">
                <i data-lucide="hard-hat" class="w-6 h-6 text-slate-600"></i>
              </div>
            )}
          </div>
          
          <!-- Boots slot -->
          <div class="equipment-slot glass-card p-3 text-center">
            <div class="text-sm text-slate-400 mb-1">Sepatu</div>
            {equipment.boots ? (
              <div class="cursor-pointer"
                   title={`${equipment.boots.name} (${equipment.boots.rarity})`}
                   onClick={() => unequipItem('boots')}>
                <div class="w-12 h-12 mx-auto bg-slate-700 rounded flex items-center justify-center mb-1">
                  <i data-lucide="boot" class="w-6 h-6"></i>
                </div>
                <div class="text-xs truncate">{equipment.boots.name}</div>
              </div>
            ) : (
              <div class="w-12 h-12 mx-auto bg-slate-800 rounded flex items-center justify-center mb-1 border-2 border-dashed border-slate-600">
                <i data-lucide="boot" class="w-6 h-6 text-slate-600"></i>
              </div>
            )}
          </div>
          
          <!-- Ring 1 slot -->
          <div class="equipment-slot glass-card p-3 text-center">
            <div class="text-sm text-slate-400 mb-1">Cincin</div>
            {equipment.ring1 ? (
              <div class="cursor-pointer"
                   title={`${equipment.ring1.name} (${equipment.ring1.rarity})`}
                   onClick={() => unequipItem('ring1')}>
                <div class="w-12 h-12 mx-auto bg-slate-700 rounded flex items-center justify-center mb-1">
                  <i data-lucide="circle" class="w-6 h-6"></i>
                </div>
                <div class="text-xs truncate">{equipment.ring1.name}</div>
              </div>
            ) : (
              <div class="w-12 h-12 mx-auto bg-slate-800 rounded flex items-center justify-center mb-1 border-2 border-dashed border-slate-600">
                <i data-lucide="circle" class="w-6 h-6 text-slate-600"></i>
              </div>
            )}
          </div>
          
          <!-- Ring 2 slot -->
          <div class="equipment-slot glass-card p-3 text-center">
            <div class="text-sm text-slate-400 mb-1">Cincin</div>
            {equipment.ring2 ? (
              <div class="cursor-pointer"
                   title={`${equipment.ring2.name} (${equipment.ring2.rarity})`}
                   onClick={() => unequipItem('ring2')}>
                <div class="w-12 h-12 mx-auto bg-slate-700 rounded flex items-center justify-center mb-1">
                  <i data-lucide="circle" class="w-6 h-6"></i>
                </div>
                <div class="text-xs truncate">{equipment.ring2.name}</div>
              </div>
            ) : (
              <div class="w-12 h-12 mx-auto bg-slate-800 rounded flex items-center justify-center mb-1 border-2 border-dashed border-slate-600">
                <i data-lucide="circle" class="w-6 h-6 text-slate-600"></i>
              </div>
            )}
          </div>
        </div>
      </div>
      
      <!-- Stats section -->
      <div class="glass-card p-4">
        <h3 class="text-xl font-bold mb-3">Statistik</h3>
        <div class="space-y-2 text-sm">
          <div class="flex justify-between">
            <span class="text-slate-400">Kekuatan:</span>
            <span>10</span>
          </div>
          <div class="flex justify-between">
            <span class="text-slate-400">Ketangkasan:</span>
            <span>10</span>
          </div>
          <div class="flex justify-between">
            <span class="text-slate-400">Intelektual:</span>
            <span>10</span>
          </div>
          <div class="flex justify-between">
            <span class="text-slate-400">Kepribadian:</span>
            <span>10</span>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Inventory items section -->
    <div class="flex-1 flex flex-col">
      <div class="glass-card p-4 flex-1 overflow-hidden flex flex-col">
        <div class="flex justify-between items-center mb-3">
          <h3 class="text-xl font-bold">Item ({inventory.length})</h3>
          <div class="text-sm text-slate-400">
            Halaman 1 dari 1
          </div>
        </div>
        
        <div class="flex-1 overflow-y-auto">
          {inventory.length > 0 ? (
            <div class="grid grid-cols-4 gap-3">
              {inventory.map((item) => (
                <div class="inventory-item glass-card p-3 text-center cursor-pointer hover:bg-slate-700/50 transition-colors"
                     title={`${item.name} (${item.rarity})
${item.description}`}
                     onClick={() => handleItemClick(item)}>
                  <div class="w-12 h-12 mx-auto bg-slate-700 rounded flex items-center justify-center mb-2">
                    <i data-lucide={getItemIcon(item.type)} class="w-6 h-6"></i>
                  </div>
                  <div class="text-xs font-bold truncate">{item.name}</div>
                  <div class="text-xs text-slate-400">{item.quantity}x</div>
                  <div class={`text-xs mt-1 ${
                    item.rarity === 'common' ? 'text-slate-400' :
                    item.rarity === 'uncommon' ? 'text-green-400' :
                    item.rarity === 'rare' ? 'text-blue-400' :
                    item.rarity === 'epic' ? 'text-purple-400' :
                    item.rarity === 'legendary' ? 'text-yellow-400' :
                    'text-red-400'
                  }`}>
                    {item.rarity === 'common' ? 'Biasa' :
                     item.rarity === 'uncommon' ? 'Tidak Biasa' :
                     item.rarity === 'rare' ? 'Langka' :
                     item.rarity === 'epic' ? 'Epik' :
                     item.rarity === 'legendary' ? 'Legendaris' :
                     'Primordial'}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div class="flex items-center justify-center h-full text-slate-500">
              <div class="text-center">
                <i data-lucide="backpack" class="w-12 h-12 mx-auto mb-2"></i>
                <p>Inventaris kosong</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Function to get appropriate icon for item type
  function getItemIcon(type) {
    const iconMap = {
      'weapon': 'sword',
      'armor': 'shield',
      'consumable': 'beaker',
      'material': 'package',
      'artifact': 'gem',
      'currency': 'coins',
      'tool': 'hammer',
      'helmet': 'hard-hat',
      'boots': 'boot',
      'ring': 'circle',
      'amulet': 'diamond'
    };
    
    return iconMap[type] || 'package';
  }
  
  // Function to handle item click
  function handleItemClick(item) {
    // Show item details modal or context menu
    console.log('Item clicked:', item);
    
    // For now, show alert with item info
    alert(`${item.name} (${item.rarity})
${item.description}
Jumlah: ${item.quantity}`);
  }
  
  // Function to unequip item
  function unequipItem(slot) {
    const result = inventorySystem.unequipItem(slot);
    if (result.success) {
      console.log(result.message);
    } else {
      console.error(result.message);
    }
  }
  
  // Listen for state changes to update inventory
  gameStateManager.subscribe((state) => {
    // In a real implementation, we would update the UI here
    // For now, we'll just log the change
    console.log('Inventory updated');
  });
</script>