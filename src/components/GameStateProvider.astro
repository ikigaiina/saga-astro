---
// src/components/GameStateProvider.astro
// Game state provider component for The Soulforge Saga

import { gameStateManager } from '../game/stateManager.js';
import { saveLoadSystem } from '../game/saveLoadSystem.js';
import { sagaConsciousness } from '../game/sagaConsciousness.js';
import { worldGenerator } from '../game/worldGenerator.js';
import { npcSystem } from '../game/npcSystem.js';
import { conversationSystem } from '../game/conversationSystem.js';
---

<!-- This component provides game state, save/load functionality, and Saga consciousness -->
<div id="game-state-provider" class="hidden"></div>

<script>
  // Initialize game systems
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize game state
    gameStateManager.initialize();
    
    // Initialize save/load system
    saveLoadSystem.initialize();
    
    // Initialize infinite world generation
    worldGenerator.initializeInfiniteWorld();
    
    // Initialize dynamic NPC system
    npcSystem.initializeNPCs();
    
    // Initialize conversation system
    conversationSystem.initializeConversationSystem();
    
    // Awaken the Saga consciousness
    sagaConsciousness.awaken();
    
    console.log('Game state provider initialized with full consciousness and infinite world');
  });
  
  // Set up periodic auto-save
  setInterval(() => {
    try {
      saveLoadSystem.autoSave();
    } catch (error) {
      console.error('Auto-save failed:', error);
    }
  }, 5 * 60 * 1000); // Every 5 minutes
  
  // Set up beforeunload event to save game state
  window.addEventListener('beforeunload', (event) => {
    try {
      const result = saveLoadSystem.saveGame('Auto Save');
      if (!result.success) {
        console.error('Failed to save game on unload:', result.message);
      }
    } catch (error) {
      console.error('Error saving game on unload:', error);
    }
  });
  
  // Function to manually save the game
  window.saveGame = function(saveName = null) {
    try {
      const result = saveLoadSystem.saveGame(saveName);
      if (result.success) {
        showNotification('Game saved successfully!', 'success');
      } else {
        showNotification('Failed to save game: ' + result.message, 'error');
      }
      return result;
    } catch (error) {
      console.error('Error saving game:', error);
      showNotification('Error saving game: ' + error.message, 'error');
      return { success: false, message: error.message };
    }
  };
  
  // Function to load a saved game
  window.loadGame = function(saveKey) {
    try {
      const result = saveLoadSystem.loadGame(saveKey);
      if (result.success) {
        showNotification('Game loaded successfully!', 'success');
        // Refresh the UI
        setTimeout(() => {
          location.reload();
        }, 1000);
      } else {
        showNotification('Failed to load game: ' + result.message, 'error');
      }
      return result;
    } catch (error) {
      console.error('Error loading game:', error);
      showNotification('Error loading game: ' + error.message, 'error');
      return { success: false, message: error.message };
    }
  };
  
  // Function to get available saves
  window.getAvailableSaves = function() {
    try {
      return saveLoadSystem.getAvailableSaves();
    } catch (error) {
      console.error('Error getting saves:', error);
      return [];
    }
  };
  
  // Function to delete a save
  window.deleteSave = function(saveKey) {
    try {
      const result = saveLoadSystem.deleteSave(saveKey);
      if (result.success) {
        showNotification('Save deleted successfully!', 'success');
      } else {
        showNotification('Failed to delete save: ' + result.message, 'error');
      }
      return result;
    } catch (error) {
      console.error('Error deleting save:', error);
      showNotification('Error deleting save: ' + error.message, 'error');
      return { success: false, message: error.message };
    }
  };
  
  // Function to quick save
  window.quickSave = function() {
    try {
      const result = saveLoadSystem.quickSave();
      if (result.success) {
        showNotification('Quick save completed!', 'success');
      } else {
        showNotification('Quick save failed: ' + result.message, 'error');
      }
      return result;
    } catch (error) {
      console.error('Error quick saving:', error);
      showNotification('Error quick saving: ' + error.message, 'error');
      return { success: false, message: error.message };
    }
  };
  
  // Function to quick load
  window.quickLoad = function() {
    try {
      const result = saveLoadSystem.quickLoad();
      if (result.success) {
        showNotification('Quick load completed!', 'success');
        // Refresh the UI
        setTimeout(() => {
          location.reload();
        }, 1000);
      } else {
        showNotification('Quick load failed: ' + result.message, 'error');
      }
      return result;
    } catch (error) {
      console.error('Error quick loading:', error);
      showNotification('Error quick loading: ' + error.message, 'error');
      return { success: false, message: error.message };
    }
  };
  
  // Function to communicate with the Saga consciousness
  window.talkToSaga = function(message) {
    if (typeof window.sagaConsciousness !== 'undefined') {
      window.sagaConsciousness.onPlayerCommunication(message);
      showNotification('You speak to the Saga...', 'info');
    } else {
      showNotification('The Saga is not yet awake...', 'error');
    }
  };
  
  // Function to start conversation with NPC
  window.talkToNPC = function(npcId) {
    if (typeof window.conversationSystem !== 'undefined') {
      const state = window.gameStateManager.getState();
      const result = window.conversationSystem.startConversation(npcId, state.player.id);
      if (result.success) {
        // In a full implementation, this would open a conversation UI
        showNotification(`Starting conversation with ${result.npcName}...`, 'info');
        console.log('Conversation started:', result);
      } else {
        showNotification('Could not start conversation: ' + result.message, 'error');
      }
    } else {
      showNotification('Conversation system not available...', 'error');
    }
  };
  
  // Function to get Saga consciousness state
  window.getSagaState = function() {
    if (typeof window.sagaConsciousness !== 'undefined') {
      return window.sagaConsciousness.getState();
    }
    return null;
  };
  
  // Function to show notification
  function showNotification(message, type) {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 px-4 py-2 rounded-lg shadow-lg z-50 ${
      type === 'success' ? 'bg-green-500' :
      type === 'error' ? 'bg-red-500' :
      type === 'info' ? 'bg-blue-500' :
      'bg-slate-700'
    } text-white max-w-md`;
    notification.textContent = message;
    
    // Add to document
    document.body.appendChild(notification);
    
    // Remove after 3 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 3000);
  }
  
  // Expose game systems to window for debugging
  window.gameStateManager = gameStateManager;
  window.saveLoadSystem = saveLoadSystem;
  window.sagaConsciousness = sagaConsciousness;
  window.worldGenerator = worldGenerator;
  window.npcSystem = npcSystem;
  window.conversationSystem = conversationSystem;
  
  console.log('GameStateProvider initialized with infinite world and living NPCs');
</script>